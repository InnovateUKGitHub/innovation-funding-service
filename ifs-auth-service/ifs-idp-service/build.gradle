import org.apache.tools.ant.filters.ReplaceTokens
apply from: rootProject.file("gradle-support/openshift-build.gradle")

buildDocker.tag="innovateuk/" + project.name.replaceAll(/ifs-/, "") + ":latest"
buildDocker.inputDir=file("${project.buildDir}/docker")
tagDocker.imageId="innovateuk/" + project.name.replaceAll(/ifs-/, "") + ":latest"

def enabled = project.hasProperty('initialise') ? project.property('initialise').toBoolean() : false
[stop, removeContainer, createContainer, deploy, wait].each { task ->
    task.enabled = enabled
}
if (enabled) {
    buildDocker.outputs.upToDateWhen { false }
}

group 'innovateuk'
version project.version

apply plugin: 'idea'

def String javaKeystorePassword = project.properties['java.keystore.password'] ?: "changeit"

apply from: rootProject.file("gradle-support/new-relic.gradle")

buildscript {
    repositories { jcenter() }
}

task prepareDockerFile {
    dependsOn ':ifs-auth-service:prepareSecrets'
    dependsOn getNewRelicAgent

    def inputDir = project.file("$project.buildDir/docker")

    doFirst {
        def buildTimestamp = new Date().format("yyyyMMddHHmmssSSS")

        def resource_domain  = project.hasProperty('resource_domain') ? project.properties['resource_domain'] : '';

        copy {
            from 'src/main/docker/'
            into inputDir
            include 'Dockerfile-template'
            rename 'Dockerfile-template', 'Dockerfile'
            filter(ReplaceTokens, tokens: [java_keystore_password          : javaKeystorePassword,
                                           build_timestamp                 : buildTimestamp,
                                           resource_domain                 : resource_domain,
                                           version                         : project.properties['version']])
        }

        copy {
            from fileTree('src/main/docker/apache')
            into "${inputDir}/apache"
        }

        copy {
            from fileTree('src/main/docker/idp')
            into "${inputDir}/idp"
        }

        copy {
            from fileTree('src/main/docker/scripts')
            into "${inputDir}/scripts"
        }

        copy {
            from fileTree('src/main/docker/pages')
            into "${inputDir}/pages"
        }

        copy {
            from file('src/main/docker/default-jre-headless-dummy_1.0_all.deb')
            into inputDir
        }

        copy {
            from fileTree('src/main/docker/certs')
            into "${inputDir}/certs"
        }

        copy {
            from file("${rootProject.projectDir}/setup-files/scripts/docker/newrelic.jar")
            from file("${rootProject.projectDir}/setup-files/scripts/docker/newrelic.yml")
            into inputDir
        }
    }

}

buildDocker.dependsOn prepareDockerFile

project.version = idpVersion
tagDocker.tag = idpVersion
tagDockerLocal.tag = idpVersion
osStageRemote.tag = idpVersion
osStageLocal.tag = idpVersion

createContainer.containerName = "idp"
createContainer.containerId = "idp"
createContainer.env= ["SP_DOMAIN=ifs.local-dev","IDP_DOMAIN=auth.local-dev:9443","HTTPS_PORT=9443","HTTP_PORT=9080"]
createContainer.networkAliases=["auth.local-dev","iuk-auth-localdev"]
createContainer.portBindings = ['9443:9443']
createContainer.hostName="idp"
createContainer.workingDir="/usr/local/bin"
