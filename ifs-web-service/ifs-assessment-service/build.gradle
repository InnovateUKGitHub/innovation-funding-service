apply from: rootProject.file("gradle-support/spring-boot.gradle")
apply from: rootProject.file("gradle-support/openshift-build.gradle")
apply from: rootProject.file("gradle-support/prepare-docker.gradle")

buildDocker.dependsOn ":docker:app-base-image:buildDocker"
buildDocker.dependsOn prepareDockerInput
buildDocker.tag = "innovateuk/" + project.name.replaceAll(/ifs-/, "") + ":latest"
buildDocker.inputDir = project.file("$project.buildDir/docker")
tagDocker.imageId = "innovateuk/" + project.name.replaceAll(/ifs-/, "") + ":latest"

buildscript {
    ext['thymeleaf.version'] = '3.0.8.RELEASE'

    ext {
        thymeleafVersion = ext['thymeleaf.version']
    }

    ext {
        serverContext = '/assessment'
    }
}

afterEvaluate {
    ext {
        dockerDir = file("$project.parent.projectDir/docker/")
    }
}

group 'innovateuk'
version project.version

apply plugin: 'idea'

project.version = assessmentServiceVersion
tagDocker.tag = assessmentServiceVersion
osStageRemote.tag = assessmentServiceVersion
tagDockerLocal.tag = assessmentServiceVersion
osStageLocal.tag = assessmentServiceVersion

createContainer.hostName = "assessment-svc"
createContainer.containerName = "assessment-svc"
createContainer.containerId = "assessment-svc"
createContainer.portBindings = ['9002:8000']

pullImageAndCreateContainer.hostName = "assessment-svc"
pullImageAndCreateContainer.containerName = "assessment-svc"
pullImageAndCreateContainer.containerId = "assessment-svc"
pullImageAndCreateContainer.portBindings = ['9002:8000']

def enabled = project.hasProperty('ifs.assessment-service.enabled') ? project.property('ifs.assessment-service.enabled').toBoolean() : true
def pullNexusImage = project.hasProperty('ifs.assessment-service.pull.nexus.image') ? project.property('ifs.assessment-service.pull.nexus.image').toBoolean() : false
if (enabled && pullNexusImage) {

    [stopNexusContainer, removeNexusContainer, pullImageAndCreateContainer, deployNexusLocal, waitNexusDeploy].each { task ->
        task.enabled = true
    }

    [buildDocker, stop, removeContainer, createContainer, deploy, wait].each { task ->
        task.enabled = false
    }

    assemble.dependsOn deployNexusLocal

} else {
    [buildDocker, stop, removeContainer, createContainer, deploy, wait].each { task ->
        task.enabled = enabled
    }
}

prepareDockerBaseInput {
    inputs.dir file("$rootProject.projectDir/ifs-web-service/ifs-web-core/build/classes")
    dependsOn ":ifs-web-service:ifs-web-core:build"
}

dependencies {
    compile project(':ifs-web-service:ifs-web-core')
    compile project(':ifs-web-service:ifs-application-commons')
    compile project(':ifs-web-service:ifs-assessment-commons')

    testCompile project(path: ":ifs-resources", configuration: 'testArtifacts')
    testCompile project(path: ":ifs-commons", configuration: 'testArtifacts')
    testCompile project(path: ":ifs-security", configuration: 'testArtifacts')
    testCompile project(path: ":ifs-web-service:ifs-web-core", configuration: 'testArtifacts')
    testCompile project(path: ":ifs-web-service:ifs-application-commons", configuration: 'testArtifacts')

    testCompile "com.opencsv:opencsv:4.3.2"
}

jar.dependsOn ":ifs-web-service:gulp_default"
processResources.dependsOn ":ifs-web-service:applyProfiles"