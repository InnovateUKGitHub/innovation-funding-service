def targetBuild = hasProperty('profile') ? profile : 'docker'

apply from: rootProject.file("gradle-support/spring-boot.gradle")

apply from: rootProject.file("gradle-support/profile-handler.gradle")

processResources.dependsOn applyProfiles

apply from: "../flyway.gradle"

apply from: "db-reset.gradle"
apply from: "db-baseline.gradle"
apply from: "finance-data-service-sync.gradle"

apply from: rootProject.file("gradle-support/openshift-build.gradle")
apply from: rootProject.file("gradle-support/prepare-docker.gradle")
apply from: rootProject.file("gradle-support/mapstruct.gradle")

apply plugin: 'idea'

group 'innovateuk'
version project.version

project.version = nexusVersion
tagDocker.tag = nexusVersion
osStageRemote.tag = nexusVersion
tagDockerLocal.tag = nexusVersion
osStageLocal.tag = nexusVersion

afterEvaluate {
    ext {
        dockerDir = file("$project.parent.projectDir/docker/")
    }
    ext {
        snippetsDir = file('build/generated-snippets')
    }

}
ext.ifsWebSystemUserId = "8394d970-b250-4b15-9621-3534325691b4"

buildDocker.dependsOn prepareDockerInput
buildDocker.tag = "innovateuk/" + project.name.replaceAll(/ifs-/, "") + ":latest"
buildDocker.inputDir = project.file("$project.buildDir/docker")
tagDocker.imageId = "innovateuk/" + project.name.replaceAll(/ifs-/, "") + ":latest"


def enabled = project.hasProperty('ifs.data-service.enabled') ? project.property('ifs.data-service.enabled').toBoolean() : true
def pullNexusImage = project.hasProperty('ifs.data-service.pull.nexus.image') ? project.property('ifs.data-service.pull.nexus.image').toBoolean() : false
if (enabled && pullNexusImage) {

    [stopNexusContainer, removeNexusContainer, pullImageAndCreateContainer, deployNexusLocal, waitNexusDeploy, flywayClean, flywayMigrate].each { task ->
        task.enabled = true
    }

    [buildDocker, stop, removeContainer, createContainer, deploy, wait].each { task ->
        task.enabled = false
    }

    assemble.dependsOn deployNexusLocal

} else {
    [buildDocker, stop, removeContainer, createContainer, deploy, wait, flywayClean, flywayMigrate].each { task ->
        task.enabled = enabled
    }
}
deploy.dependsOn ":docker:ifs-mysql:ifs-database:wait"
deploy.mustRunAfter ":docker:ifs-mysql:ifs-database:deploy"

deployNexusLocal.dependsOn ":docker:ifs-mysql:ifs-database:waitNexusDeploy"
deployNexusLocal.mustRunAfter ":docker:ifs-mysql:ifs-database:deployNexusLocal"

createContainer.portBindings = ['8086:8080', '9006:8000']
createContainer.networkAliases = ["ifs-data-service"]
createContainer.env = ["SPRING_PROFILES_ACTIVE=debug"]

pullImageAndCreateContainer.portBindings = ['8086:8080', '9006:8000']
pullImageAndCreateContainer.networkAliases = ["ifs-data-service"]
createContainer.env = ["SPRING_PROFILES_ACTIVE=debug"]

ext.idpRestKey = project.properties['idp.rest.key'] ?: "1234567890"

ext.companiesHouseLookupEnabled = ext.has('ifs.companies.house.enabled') ? ext.get('ifs.companies.house.enabled') : false
ext.companiesHouseKey = ext.has('ifs.companies.house.key') ? ext.get('ifs.companies.house.key') : 'mock-key'

ext.docusignAccountId = ext.has('ifs.docusign.api.account') ? ext.get('ifs.docusign.api.account') : 'mock-key'
ext.docusignUserId = ext.has('ifs.docusign.auth.user') ? ext.get('ifs.docusign.auth.user') : 'mock-key'
ext.docusignClientId = ext.has('ifs.docusign.auth.client') ? ext.get('ifs.docusign.auth.client') : 'mock-key'
ext.docusignAuthKey = ext.has('ifs.docusign.auth.key') ? ext.get('ifs.docusign.auth.key') : 'mock-key'


ext {
    ifsFinanceTotalsBaseURL = 'http://finance-data-service:8080'
}

prepareDockerBaseInput {
    inputs.dir file("$rootProject.projectDir/ifs-data-layer/data-service-commons/build/classes")
    inputs.dir file("$rootProject.projectDir/ifs-data-layer/data-service-notifications/build/classes")
    inputs.dir file("$rootProject.projectDir/ifs-data-layer/data-service-file/build/classes")
    inputs.dir file("$rootProject.projectDir/ifs-data-layer/data-service-alerts/build/classes")
    inputs.dir file("$rootProject.projectDir/ifs-sil-resources/build/classes")
    inputs.dir file("$rootProject.projectDir/ifs-error-util/build/classes")

    dependsOn ":ifs-data-layer:data-service-commons:build"
    dependsOn ":ifs-data-layer:data-service-notifications:build"
    dependsOn ":ifs-data-layer:data-service-file:build"
    dependsOn ":ifs-data-layer:data-service-alerts:build"
    dependsOn ":ifs-sil-resources:build"
    dependsOn ":ifs-error-util:build"

}


dependencies {
    compile project(":ifs-data-layer:data-service-commons")
    compile project(path: ":ifs-data-layer:data-service-notifications", configuration: 'default')
    compile project(path: ":ifs-data-layer:data-service-file", configuration: 'default')
    compile project(":ifs-sil-resources")
    compile project(":ifs-error-util")

    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-validation"
    compile "org.springframework.security:spring-security-crypto"
    compile "org.springframework.boot:spring-boot-starter-security"

    compile "org.springframework.boot:spring-boot-starter-data-redis"
    compile "org.apache.commons:commons-pool2"

    compile "io.springfox:springfox-boot-starter:3.0.0"
    compile 'io.springfox:springfox-swagger-ui:3.0.0'

    compile "org.springframework.boot:spring-boot-starter-cache"
    compile "org.springframework:spring-web"
    compile "com.jayway.jsonpath:json-path-assert"
    compile "com.jayway.jsonpath:json-path"
    compile "org.springframework.statemachine:spring-statemachine-core:2.1.3.RELEASE"
    compile 'org.apache.commons:commons-lang3'
    compile 'org.apache.commons:commons-text'
    compile 'commons-codec:commons-codec'
    compile "commons-beanutils:commons-beanutils"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    compile 'com.docusign:docusign-esign-java:3.2.0'
    compile "com.newrelic.agent.java:newrelic-api:6.1.0"
    compile "com.hubspot.slack:slack-base:1.12"
    compile "com.hubspot.slack:slack-java-client:1.12"

    compile 'javax.mail:mail'
    compile "org.apache.httpcomponents:httpasyncclient"
    compile "com.google.guava:guava"
    compile "commons-io:commons-io"
    compile 'org.jsoup:jsoup'
    compile "com.opencsv:opencsv"

    testCompile project(path: ":ifs-resources", configuration: 'testArtifacts')
    testCompile project(path: ":ifs-commons", configuration: 'testArtifacts')
    testCompile project(path: ":ifs-security", configuration: 'testArtifacts')
    testCompile project(path: ":ifs-data-layer:data-service-commons", configuration: 'testArtifacts')
    testCompile project(path: ":ifs-data-layer:data-service-file", configuration: 'testArtifacts')
    testCompile project(path: ":ifs-data-layer:data-service-notifications", configuration: 'testArtifacts')
    testCompile project(path: ":ifs-sil-resources", configuration: 'testArtifacts')

    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testCompile "com.openpojo:openpojo:0.8.4"
    testCompile "org.skyscreamer:jsonassert:1.3.0"
}

test {

    minHeapSize = "1024m"
    maxHeapSize = "2048m"

    if (project.hasProperty('excludeTests')) {
        exclude "${project.excludeTests}"
    }

    if (project.hasProperty('testGroups')) {
        systemProperty 'testGroups', project.getProperty('testGroups')
    }

    if (targetBuild == 'docker') {
        dependsOn ":docker:ifs-mysql:ifs-database:initDB"
    }
}


task syncShib(type: Exec) {
    commandLine 'docker', 'exec', 'ldap', '/usr/local/bin/ldap-sync-from-ifs-db.sh'
}


task syncUser() {
    doLast {
        if (project.hasProperty('email')) {
            exec {
                commandLine 'docker', 'exec', 'ldap', '/usr/local/bin/ldap-sync-user.sh', project.getProperty('email')
            }
        } else {
            throw new GradleException('Please enter comma separated valid emails. Example, ./gradlew syncUser -Pemail=steve.smith@empire.com,troy.ward@gmail.com')
        }
    }
}


task prepareAnonymisedDB(dependsOn: [":docker:ifs-mysql:ifs-database:updateIfsWebUser", syncShib]) {
    syncShib.mustRunAfter ":docker:ifs-mysql:ifs-database:updateIfsWebUser"
}

flywayClean.dependsOn applyProfiles
flywayMigrate.dependsOn processResources

ext.ifsDataServiceRestBaseURL = "http://data-service:8080"
ext.serverPort = 8080
