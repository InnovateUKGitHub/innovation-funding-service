def targetBuild = hasProperty('profile') ? profile : 'docker'

apply from: rootProject.file("gradle-support/spring-boot.gradle")

apply from: rootProject.file("gradle-support/profile-handler.gradle")

processResources.dependsOn applyProfiles

apply from: "../flyway.gradle"

apply from: "db-reset.gradle"
apply from: "db-baseline.gradle"
apply from: "finance-data-service-sync.gradle"

apply from: rootProject.file("gradle-support/mapstruct.gradle")

apply plugin: 'idea'

apply from: rootProject.file("gradle-support/jib.gradle")

group 'innovateuk'
version project.version

project.version = nexusVersion

afterEvaluate {
    ext {
        dockerDir = file("$project.parent.projectDir/docker/")
    }
    ext {
        snippetsDir = file('build/generated-snippets')
    }

}
ext.ifsWebSystemUserId = "8394d970-b250-4b15-9621-3534325691b4"

ext.idpRestKey = project.properties['idp.rest.key'] ?: "1234567890"

ext.companiesHouseLookupEnabled = ext.has('ifs.companies.house.enabled') ? ext.get('ifs.companies.house.enabled') : false
ext.companiesHouseKey = ext.has('ifs.companies.house.key') ? ext.get('ifs.companies.house.key') : 'mock-key'

ext.docusignAccountId = ext.has('ifs.docusign.api.account') ? ext.get('ifs.docusign.api.account') : 'mock-key'
ext.docusignUserId = ext.has('ifs.docusign.auth.user') ? ext.get('ifs.docusign.auth.user') : 'mock-key'
ext.docusignClientId = ext.has('ifs.docusign.auth.client') ? ext.get('ifs.docusign.auth.client') : 'mock-key'
ext.docusignAuthKey = ext.has('ifs.docusign.auth.key') ? ext.get('ifs.docusign.auth.key') : 'mock-key'


ext {
    ifsFinanceTotalsBaseURL = 'http://finance-data-service:8080'
}


dependencies {
    implementation "org.innovateuk.ifs.libraries:ifs-data-service-file"
    implementation "org.innovateuk.ifs.libraries:ifs-data-service-commons"
    implementation "org.innovateuk.ifs.libraries:ifs-data-service-notifications"
    implementation "org.innovateuk.ifs.libraries:ifs-sil-resources"
    implementation "org.innovateuk.ifs.libraries:ifs-error-util"

    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.security:spring-security-crypto"
    implementation "org.springframework.boot:spring-boot-starter-security"

    implementation "org.springframework.boot:spring-boot-starter-data-redis"
    implementation "org.apache.commons:commons-pool2"

    implementation "io.springfox:springfox-boot-starter:3.0.0"
    implementation 'io.springfox:springfox-swagger-ui:3.0.0'

    implementation "org.springframework.boot:spring-boot-starter-cache"
    compile "org.springframework:spring-web"
    compile "com.jayway.jsonpath:json-path-assert"
    compile "com.jayway.jsonpath:json-path"
    compile "org.springframework.statemachine:spring-statemachine-core:2.1.3.RELEASE"
    compile 'org.apache.commons:commons-lang3'
    compile 'org.apache.commons:commons-text'
    compile 'commons-codec:commons-codec'
    compile "commons-beanutils:commons-beanutils"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    compile 'com.docusign:docusign-esign-java:3.2.0'
    compile "com.newrelic.agent.java:newrelic-api:6.1.0"
    compile "com.hubspot.slack:slack-base:1.12"
    compile "com.hubspot.slack:slack-java-client:1.12"

    compile 'javax.mail:mail'
    compile "org.apache.httpcomponents:httpasyncclient"
    compile "com.google.guava:guava"
    compile "commons-io:commons-io"
    compile 'org.jsoup:jsoup'
    compile "com.opencsv:opencsv"

    testImplementation "org.innovateuk.ifs.libraries:ifs-commons"
    testImplementation "org.innovateuk.ifs.libraries:ifs-resources"
    testImplementation "org.innovateuk.ifs.libraries:ifs-security-test"
    testImplementation "org.innovateuk.ifs.libraries:ifs-data-service-commons-test"

    testImplementation "org.innovateuk.ifs.libraries:ifs-data-service-notifications-test"

    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation "com.openpojo:openpojo:0.8.4"
    testImplementation "org.skyscreamer:jsonassert:1.3.0"
    testImplementation "junit:junit"
}

test {

    minHeapSize = "1024m"
    maxHeapSize = "2048m"

    if (project.hasProperty('excludeTests')) {
        exclude "${project.excludeTests}"
    }

    if (project.hasProperty('testGroups')) {
        systemProperty 'testGroups', project.getProperty('testGroups')
    }

}


task syncShib(type: Exec) {
    commandLine 'docker', 'exec', 'ldap', '/usr/local/bin/ldap-sync-from-ifs-db.sh'
}


task syncUser() {
    doLast {
        if (project.hasProperty('email')) {
            exec {
                commandLine 'docker', 'exec', 'ldap', '/usr/local/bin/ldap-sync-user.sh', project.getProperty('email')
            }
        } else {
            throw new GradleException('Please enter comma separated valid emails. Example, ./gradlew syncUser -Pemail=steve.smith@empire.com,troy.ward@gmail.com')
        }
    }
}


task prepareAnonymisedDB(dependsOn: [":docker:ifs-mysql:ifs-database:updateIfsWebUser", syncShib]) {
    syncShib.mustRunAfter ":docker:ifs-mysql:ifs-database:updateIfsWebUser"
}

flywayClean.dependsOn applyProfiles
flywayMigrate.dependsOn processResources

ext.ifsDataServiceRestBaseURL = "http://data-service:8080"
ext.serverPort = 8080
