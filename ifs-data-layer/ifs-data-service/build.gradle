def targetBuild = hasProperty('profile') ? profile : 'docker'

apply from: rootProject.file("gradle-support/spring-boot.gradle")

apply from: rootProject.file("gradle-support/profile-handler.gradle")

apply from: "../flyway.gradle"

apply from: rootProject.file("gradle-support/mapstruct.gradle")

apply from: rootProject.file("gradle-support/jib.gradle")

group 'innovateuk'
version project.version

afterEvaluate {
    ext {
        dockerDir = file("$project.parent.projectDir/docker/")
    }
    ext {
        snippetsDir = file('build/generated-snippets')
    }

}

jib {
    // data-service has extra permissions set for gluster
    from.image = 'docker-ifs.devops.innovateuk.org/releases/openjdk-data-service:1.0@sha256:af1308427c82c317ec67822274a17553335262588b9dc904e3aa670ee8e3dc30'
}

dependencies {
    implementation "org.innovateuk.ifs.libraries:ifs-data-service-file"
    implementation "org.innovateuk.ifs.libraries:ifs-data-service-commons"
    implementation "org.innovateuk.ifs.libraries:ifs-data-service-notifications"
    implementation "org.innovateuk.ifs.libraries:ifs-sil-resources"
    implementation "org.innovateuk.ifs.libraries:ifs-error-util"
    implementation 'org.innovateuk.ifs.libraries:ifs-data-service-file'
    implementation 'org.innovateuk.ifs.libraries:ifs-resources'
    implementation 'org.innovateuk.ifs.libraries:ifs-commons'
    implementation 'org.innovateuk.ifs.libraries:ifs-security'
    implementation 'org.innovateuk.ifs.libraries:ifs-rest-util'

    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.security:spring-security-crypto"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-data-redis"
    implementation "org.springframework.boot:spring-boot-starter-cache"
    implementation "org.springframework.boot:spring-boot-starter-web"

    implementation "org.springframework.statemachine:spring-statemachine-core:2.1.3.RELEASE"
    implementation "org.apache.commons:commons-pool2"

    implementation("org.apache.pdfbox:pdfbox:2.0.22") {
        exclude group: "commons-logging", module: "commons-logging"
    }
    implementation 'org.apache.poi:poi:4.1.2'
    implementation 'org.apache.poi:poi-ooxml:4.1.2'

    implementation 'org.apache.commons:commons-lang3'
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation 'com.docusign:docusign-esign-java:3.2.0'
    implementation "com.newrelic.agent.java:newrelic-api:6.1.0"
    implementation "com.hubspot.slack:slack-base:1.12"
    implementation "com.hubspot.slack:slack-java-client:1.12"

    implementation 'javax.mail:mail'
    implementation "org.apache.httpcomponents:httpasyncclient"
    implementation "com.google.guava:guava"
    implementation 'org.jsoup:jsoup'
    implementation("com.opencsv:opencsv") {
        exclude group: "commons-logging", module: "commons-logging"
    }

    testImplementation "org.innovateuk.ifs.libraries:ifs-commons-test"
    testImplementation "org.innovateuk.ifs.libraries:ifs-security-test"
    testImplementation "org.innovateuk.ifs.libraries:ifs-data-service-commons-test"
    testImplementation "org.innovateuk.ifs.libraries:ifs-data-service-notifications-test"

    testImplementation "junit:junit"
}

test {

    minHeapSize = "1024m"
    maxHeapSize = "2048m"

    if (project.hasProperty('excludeTests')) {
        exclude "${project.excludeTests}"
    }

    if (project.hasProperty('testGroups')) {
        systemProperty 'testGroups', project.getProperty('testGroups')
    }

}


task syncShib(type: Exec) {
    commandLine 'docker', 'exec', 'ldap', '/usr/local/bin/ldap-sync-from-ifs-db.sh'
}


task syncUser() {
    doLast {
        if (project.hasProperty('email')) {
            exec {
                commandLine 'docker', 'exec', 'ldap', '/usr/local/bin/ldap-sync-user.sh', project.getProperty('email')
            }
        } else {
            throw new GradleException('Please enter comma separated valid emails. Example, ./gradlew syncUser -Pemail=steve.smith@empire.com,troy.ward@gmail.com')
        }
    }
}


task prepareAnonymisedDB(dependsOn: [":docker:ifs-mysql:ifs-database:updateIfsWebUser", syncShib]) {
    syncShib.mustRunAfter ":docker:ifs-mysql:ifs-database:updateIfsWebUser"
}
