def targetBuild = hasProperty('profile') ? profile : 'docker'

apply from: rootProject.file("gradle-support/spring-boot.gradle")
apply from: rootProject.file("gradle-support/openshift-build.gradle")
apply from: rootProject.file("gradle-support/prepare-docker.gradle")
apply from: rootProject.file("gradle-support/mapstruct.gradle")
apply from: rootProject.file("gradle-support/asciidoc.gradle")

apply from: rootProject.file("gradle-support/profile-handler.gradle")

processResources.dependsOn applyProfiles

apply from: "../flyway.gradle"
apply plugin: 'org.asciidoctor.convert'

apply plugin: 'idea'

group 'innovateuk'
version project.version

project.version = euGrantRegistrationDataServiceVersion
tagDocker.tag = euGrantRegistrationDataServiceVersion
osStageRemote.tag = euGrantRegistrationDataServiceVersion
tagDockerLocal.tag = euGrantRegistrationDataServiceVersion
osStageLocal.tag = euGrantRegistrationDataServiceVersion

def enabled = project.hasProperty('ifs.eu-grant-registration-data-service.enabled') ? project.property('ifs.eu-grant-registration-data-service.enabled').toBoolean() : false
[stop, removeContainer, createContainer, deploy, wait, flywayClean, flywayMigrate].each { task ->
    task.enabled = enabled
}
createContainer.portBindings = ['9014:8000', '8088:8080']

if (enabled) {
    deploy.dependsOn ":docker:ifs-mysql:eu-grant-registration-database:wait"
    deploy.mustRunAfter ":docker:ifs-mysql:eu-grant-registration-database:deploy"
}

createContainer.networkAliases = ["ifs-eu-grant-registration-data-service"]

afterEvaluate {
    ext {
        dockerDir = file("$project.parent.projectDir/docker/")
    }
}

ext.ifsWebSystemUserId = "c0d02979-e66e-11e7-ac43-0242ac120002"

ext {
    snippetsDir = file('build/generated-snippets')
}

buildDocker.dependsOn prepareDockerInput
buildDocker.dependsOn ":docker:app-base-image:buildDocker"
buildDocker.tag = "innovateuk/" + project.name.replaceAll(/ifs-/, "") + ":latest"
buildDocker.inputDir = project.file("$project.buildDir/docker")
tagDocker.imageId = "innovateuk/" + project.name.replaceAll(/ifs-/, "") + ":latest"


prepareDockerBaseInput {
    inputs.dir file("$rootProject.projectDir/ifs-commons/build/classes")
    inputs.dir file("$rootProject.projectDir/ifs-resources/build/classes")
    inputs.dir file("$rootProject.projectDir/ifs-data-layer/data-service-commons/build/classes")
    inputs.dir file("$rootProject.projectDir/ifs-data-layer/data-service-notifications/build/classes")
    inputs.dir file("$rootProject.projectDir/ifs-security/build/classes")


    dependsOn ":ifs-commons:build"
    dependsOn ":ifs-data-layer:data-service-notifications:build"
    dependsOn ":ifs-resources:build"
    dependsOn ":ifs-data-layer:data-service-commons:build"
    dependsOn ":ifs-security:build"

}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.mariadb.jdbc:mariadb-java-client:2.4.4"
    compile "com.opencsv:opencsv:4.3.2"

    compile project(':ifs-commons')
    compile project(':ifs-resources')
    compile project(':ifs-resources:eu-grant-registration-resources')
    compile project(':ifs-security')
    compile project(':ifs-data-layer:data-service-commons')
    compile project(":ifs-data-layer:data-service-notifications")

    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testCompile 'com.h2database:h2'

    testCompile project(path: ":ifs-resources", configuration: 'testArtifacts')
    testCompile project(path: ":ifs-resources:eu-grant-registration-resources", configuration: 'testArtifacts')
    testCompile project(path: ":ifs-commons", configuration: 'testArtifacts')
    testCompile project(path: ":ifs-security", configuration: 'testArtifacts')
    testCompile project(path: ":ifs-data-layer:data-service-commons", configuration: 'testArtifacts')
    testCompile project(path: ":ifs-data-layer:data-service-notifications", configuration: 'testArtifacts')

    testCompile 'au.com.dius:pact-jvm-provider-spring_2.12:3.5.14'
}

test {
    outputs.dir snippetsDir
    if (project.hasProperty('excludeTests')) {
        exclude "${project.excludeTests}"
    }
    finalizedBy asciidoctor

    if (targetBuild == 'docker' && enabled) {
        dependsOn ":docker:ifs-mysql:eu-grant-registration-database:initDB"
    }

}

flywayClean.dependsOn applyProfiles
flywayMigrate.dependsOn processResources
