def targetBuild = hasProperty('profile') ? profile : 'docker'

apply from: rootProject.file("gradle-support/spring-boot.gradle")
apply from: rootProject.file("gradle-support/openshift-build.gradle")
apply from: rootProject.file("gradle-support/prepare-docker.gradle")
apply from: rootProject.file("gradle-support/mapstruct.gradle")

apply from: rootProject.file("gradle-support/profile-handler.gradle")

processResources.dependsOn applyProfiles

apply from: "../flyway.gradle"
apply plugin: 'idea'

group 'innovateuk'
version project.version

project.version = nexusVersion
tagDocker.tag = nexusVersion
osStageRemote.tag = nexusVersion
tagDockerLocal.tag = nexusVersion
osStageLocal.tag = nexusVersion

def enabled = project.hasProperty('ifs.finance-data-service.enabled') ? project.property('ifs.finance-data-service.enabled').toBoolean() : true
def pullNexusImage = project.hasProperty('ifs.finance-data-service.pull.nexus.image') ? project.property('ifs.finance-data-service.pull.nexus.image').toBoolean() : false
if (enabled && pullNexusImage) {

    [stopNexusContainer, removeNexusContainer, pullImageAndCreateContainer, deployNexusLocal, waitNexusDeploy, flywayClean, flywayMigrate].each { task ->
        task.enabled = true
    }

    [buildDocker, stop, removeContainer, createContainer, deploy, wait].each { task ->
        task.enabled = false
    }

    assemble.dependsOn deployNexusLocal

} else {
    [buildDocker, stop, removeContainer, createContainer, deploy, wait, flywayClean, flywayMigrate].each { task ->
        task.enabled = enabled
    }
}

createContainer.portBindings = ['9012:8000']
createContainer.networkAliases = ["ifs-finance-data-service"]

pullImageAndCreateContainer.portBindings = ['9012:8000']
pullImageAndCreateContainer.networkAliases = ["ifs-finance-data-service"]
createContainer.env = ["SPRING_PROFILES_ACTIVE=debug"]

deploy.dependsOn ":docker:ifs-mysql:ifs-finance-database:wait"
deploy.mustRunAfter ":docker:ifs-mysql:ifs-finance-database:deploy"

deployNexusLocal.dependsOn ":docker:ifs-mysql:ifs-finance-database:waitNexusDeploy"
deployNexusLocal.mustRunAfter ":docker:ifs-mysql:ifs-finance-database:deployNexusLocal"


afterEvaluate {
    ext {
        dockerDir = file("$project.parent.projectDir/docker/")
    }
}

ext.dockerComposeFile = "docker-compose/docker-compose-finance-totals.yml"
ext.ifsWebSystemUserId = "8394d970-b250-4b15-9621-3534325691b4"

ext {
    snippetsDir = file('build/generated-snippets')
}

buildDocker.dependsOn prepareDockerInput
buildDocker.tag = "innovateuk/" + project.name.replaceAll(/ifs-/, "") + ":latest"
buildDocker.inputDir = project.file("$project.buildDir/docker")
tagDocker.imageId = "innovateuk/" + project.name.replaceAll(/ifs-/, "") + ":latest"

prepareDockerBaseInput {
    inputs.dir file("$rootProject.projectDir/ifs-commons/build/classes")
    inputs.dir file("$rootProject.projectDir/ifs-resources/build/classes")
    inputs.dir file("$rootProject.projectDir/ifs-data-layer/data-service-commons/build/classes")
    inputs.dir file("$rootProject.projectDir/ifs-security/build/classes")


    dependsOn ":ifs-commons:build"
    dependsOn ":ifs-resources:build"
    dependsOn ":ifs-data-layer:data-service-commons:build"
    dependsOn ":ifs-security:build"

}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile "org.springframework.boot:spring-boot-starter-security"
    compile 'commons-codec:commons-codec'

    compile project(':ifs-commons')
    compile project(':ifs-resources')
    compile project(':ifs-security')

    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc'

    testCompile project(path: ":ifs-resources", configuration: 'testArtifacts')
    testCompile project(path: ":ifs-commons", configuration: 'testArtifacts')
    testCompile project(path: ":ifs-security", configuration: 'testArtifacts')
}

test {
    outputs.dir snippetsDir
    if (project.hasProperty('excludeTests')) {
        exclude "${project.excludeTests}"
    }

    if (project.hasProperty('testGroups')) {
        systemProperty 'testGroups', project.getProperty('testGroups')
    }

}

flywayClean.dependsOn applyProfiles
flywayMigrate.dependsOn processResources

ext.serverPort = 8080
ext.ifsFlywayLocations = "db/migration"

