def targetBuild = hasProperty('profile') ? profile : 'docker'

apply from: rootProject.file("gradle-support/spring-boot.gradle")
apply from: rootProject.file("gradle-support/mapstruct.gradle")

apply from: rootProject.file("gradle-support/profile-handler.gradle")
apply from: rootProject.file("gradle-support/jib.gradle")

processResources.dependsOn applyProfiles


apply from: "../flyway.gradle"

afterEvaluate {
    ext {
        dockerDir = file("$project.parent.projectDir/docker/")
    }
}

ext.ifsWebSystemUserId = "c0d02979-e66e-11e7-ac43-0242ac120002"

ext {
    snippetsDir = file('build/generated-snippets')
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-security"

    implementation "org.innovateuk.ifs.libraries:ifs-commons"
    implementation "org.innovateuk.ifs.libraries:ifs-error-util"
    implementation "org.innovateuk.ifs.libraries:ifs-rest-util"
    implementation 'org.innovateuk.ifs.libraries:ifs-resources'
    implementation "org.innovateuk.ifs.libraries:ifs-survey-resources"
    implementation "org.innovateuk.ifs.libraries:ifs-security"

    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    testImplementation "org.innovateuk.ifs.libraries:ifs-commons-test"
    testImplementation "org.innovateuk.ifs.libraries:ifs-security-test"

    testImplementation "junit:junit"
}

test {
    outputs.dir snippetsDir
    if (project.hasProperty('excludeTests')) {
        exclude "${project.excludeTests}"
    }
}

flywayClean.dependsOn applyProfiles
flywayMigrate.dependsOn processResources

ext.serverPort = 8080
ext.ifsFlywayLocations = "db/migration"

