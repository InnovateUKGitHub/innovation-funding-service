def targetBuild = hasProperty('profile') ? profile : 'docker'

apply from: rootProject.file("gradle-support/spring-boot.gradle")
apply from: rootProject.file("gradle-support/openshift-build.gradle")
apply from: rootProject.file("gradle-support/prepare-docker.gradle")
apply from: rootProject.file("gradle-support/mapstruct.gradle")

apply from: rootProject.file("gradle-support/profile-handler.gradle")
apply from: rootProject.file("gradle-support/jib.gradle")

processResources.dependsOn applyProfiles


apply from: "../flyway.gradle"

project.version = nexusVersion

afterEvaluate {
    ext {
        dockerDir = file("$project.parent.projectDir/docker/")
    }
}

ext.ifsWebSystemUserId = "c0d02979-e66e-11e7-ac43-0242ac120002"

ext {
    snippetsDir = file('build/generated-snippets')
}


dependencies {
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile "org.springframework.boot:spring-boot-starter-security"

    compile project(':ifs-commons')
    compile project(':ifs-resources')
    compile project(':ifs-resources:ifs-survey-resources')
    compile project(':ifs-security')

    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc'

    testCompile project(path: ":ifs-resources", configuration: 'testArtifacts')
    testCompile project(path: ":ifs-resources:ifs-survey-resources", configuration: 'testArtifacts')
    testCompile project(path: ":ifs-commons", configuration: 'testArtifacts')
    testCompile project(path: ":ifs-security", configuration: 'testArtifacts')
}

test {
    outputs.dir snippetsDir
    if (project.hasProperty('excludeTests')) {
        exclude "${project.excludeTests}"
    }
}

flywayClean.dependsOn applyProfiles
flywayMigrate.dependsOn processResources

ext.serverPort = 8080
ext.ifsFlywayLocations = "db/migration"

