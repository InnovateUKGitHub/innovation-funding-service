def targetBuild = hasProperty('profile') ? profile : 'docker'

apply from: rootProject.file("gradle-support/spring-boot.gradle")
apply from: rootProject.file("gradle-support/openshift-build.gradle")
apply from: rootProject.file("gradle-support/prepare-docker.gradle")
apply from: rootProject.file("gradle-support/mapstruct.gradle")

apply from: rootProject.file("gradle-support/profile-handler.gradle")

processResources.dependsOn applyProfiles


apply from: "../flyway.gradle"

project.version = nexusVersion
tagDocker.tag = nexusVersion
osStageRemote.tag = nexusVersion
tagDockerLocal.tag = nexusVersion
osStageLocal.tag = nexusVersion

def enabled = project.hasProperty('ifs.survey-data-service.enabled') ? project.property('ifs.survey-data-service.enabled').toBoolean() : true
def pullNexusImage = project.hasProperty('ifs.survey-data-service.pull.nexus.image') ? project.property('ifs.survey-data-service.pull.nexus.image').toBoolean() : false
if (enabled && pullNexusImage) {

    [stopNexusContainer, removeNexusContainer, pullImageAndCreateContainer, deployNexusLocal, waitNexusDeploy, flywayClean, flywayMigrate].each { task ->
        task.enabled = true
    }

    [buildDocker, stop, removeContainer, createContainer, deploy, wait].each { task ->
        task.enabled = false
    }
    deployNexusLocal.dependsOn ":docker:ifs-mysql:ifs-survey-database:waitNexusDeploy"
    deployNexusLocal.mustRunAfter ":docker:ifs-mysql:ifs-survey-database:deployNexusLocal"

    assemble.dependsOn deployNexusLocal

} else {
    [buildDocker, stop, removeContainer, createContainer, deploy, wait, flywayClean, flywayMigrate].each { task ->
        task.enabled = enabled
    }
}

createContainer.portBindings = ['9013:8000', '8087:8080']
createContainer.networkAliases = ["ifs-survey-data-service"]

pullImageAndCreateContainer.portBindings = ['9013:8000', '8087:8080']
pullImageAndCreateContainer.networkAliases = ["ifs-survey-data-service"]
createContainer.env = ["SPRING_PROFILES_ACTIVE=debug"]

if (enabled) {
    deploy.dependsOn ":docker:ifs-mysql:ifs-survey-database:wait"
    deploy.mustRunAfter ":docker:ifs-mysql:ifs-survey-database:deploy"
}


afterEvaluate {
    ext {
        dockerDir = file("$project.parent.projectDir/docker/")
    }
}

ext.ifsWebSystemUserId = "c0d02979-e66e-11e7-ac43-0242ac120002"

ext {
    snippetsDir = file('build/generated-snippets')
}

buildDocker.dependsOn prepareDockerInput
buildDocker.tag = "innovateuk/" + project.name.replaceAll(/ifs-/, "") + ":latest"
buildDocker.inputDir = project.file("$project.buildDir/docker")
tagDocker.imageId = "innovateuk/" + project.name.replaceAll(/ifs-/, "") + ":latest"

prepareDockerBaseInput {
//    inputs.dir file("$rootProject.projectDir/ifs-resources/build/classes")
    inputs.dir file("$rootProject.projectDir/ifs-data-layer/data-service-commons/build/classes")
    inputs.dir file("$rootProject.projectDir/ifs-security/build/classes")


//    dependsOn ":ifs-resources:build"
    dependsOn ":ifs-security:build"

}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile "org.springframework.boot:spring-boot-starter-security"

    compile "org.innovateuk.ifs.libraries:ifs-commons"
    compile 'org.innovateuk.ifs.libraries:ifs-resources'
    compile "org.innovateuk.ifs.libraries:ifs-survey-resources"
    compile project(':ifs-security')

    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc'

    testCompile "org.innovateuk.ifs.libraries:ifs-commons"
    testCompile project(path: ":ifs-security", configuration: 'testArtifacts')
    testCompile "junit:junit"
}

test {
    outputs.dir snippetsDir
    if (project.hasProperty('excludeTests')) {
        exclude "${project.excludeTests}"
    }
}

flywayClean.dependsOn applyProfiles
flywayMigrate.dependsOn processResources

ext.serverPort = 8080
ext.ifsFlywayLocations = "db/migration"

