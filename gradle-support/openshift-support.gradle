//support tasks for dealing with Openshift
if (project.hasProperty('profile') && profile == 'automated') {
    ext.openshiftEnv = project.properties['openshiftEnv'] ?: "automated"
}

//Workaround because of process resources.  dependency should be removed.
apply from: rootProject.file("gradle-support/java.gradle")
build.enabled = false
// End workaround

apply from: rootProject.file("gradle-support/openshift-util.gradle")

if (project.hasProperty('openshiftEnv')) {
    ext.openshiftEnv = openshiftEnv.replaceAll('/', '-')
}

task osApplyNonNamedEnvProperties(type: Exec) {
    executable = 'setup-files/scripts/openshift/os-apply-properties-from-secrets.sh'
    args = [openshiftEnv, project.findProperty("ssm_location") ?: "NON-NAMED", project.version, project.findProperty("use_iam") ?: "true"]
}

task osApplyNamedEnvProperties(type: Exec) {
    def envName = openshiftEnv.replaceAll("([a-z])", "\$1").toUpperCase()
    executable = 'setup-files/scripts/openshift/os-apply-properties-from-secrets.sh'
    args = [openshiftEnv, envName, project.version, project.findProperty("use_iam") ?: "true"]
}

task osApplyEnvProperties(){
    if (isNamedEnv()) {
        dependsOn osApplyNamedEnvProperties
    } else {
        dependsOn osApplyNonNamedEnvProperties
    }
}

task getProperties(type: Exec, dependsOn: osApplyEnvProperties) {
    executable = 'setup-files/scripts/openshift/generate-gradle-properties.sh'
    args = [openshiftEnv, openshiftEnv]
}

task applyNonNamedEnvProperties(dependsOn: getProperties) {
    doLast {
        apply from: rootProject.file("gradle-support/non-named-env-properties.gradle")
    }
}

task applyNamedEnvProperties(dependsOn: getProperties) {
    doLast {
        apply from: rootProject.file("gradle-support/" + openshiftEnv + "-named-env-properties.gradle")
    }
}

task createSecretsFromAws() {
    if (!isNamedEnv()) {
        dependsOn applyNonNamedEnvProperties
    } else {
        dependsOn applyNamedEnvProperties
    }
}

task prepareRoutes(type: Copy) {

    destinationDir = file('build/resources/main/routes')
    from('os-files/routes/') {
        include '**/*.yml'
    }
    filesMatching("**/**.*") {
        expand project.properties
    }
}

task prepareConfig(type: Copy, dependsOn: createSecretsFromAws) {

    destinationDir = file('build/resources/main/config-maps')
    from('os-files/config-maps/') {
        include '**/*.yml'
    }
    filesMatching("**/**.*") {
        expand project.properties
    }
}

task prepareGluster(type: Copy) {

    destinationDir = file('build/resources/main/gluster')
    from('os-files/gluster/') {
        include '**/*.yml'
    }
    filesMatching("**/**.*") {
        expand project.properties
    }
}

task prepareConfigDeployment(dependsOn: [prepareConfig, prepareRoutes, prepareGluster]) {
    println "Preparing Config"
}

task prepareDeployAndUpgrade(type: Copy, dependsOn: createSecretsFromAws) {

    destinationDir = file('build/resources/main')
    from('os-files/') {
        include '**/*.yml'
        exclude 'config-maps/*.yml'
        exclude 'routes/*.yml'
        exclude 'gluster/'
    }
    filesMatching("**/**.*") {
        expand project.properties
    }
}

task prepareBaseline(type: Copy) {

    destinationDir = file('build/resources/main')
    from('os-files/db-baseline/') {
        include '**/*.yml'
    }
    filesMatching("**/**.*") {
        expand project.properties
    }
}

task prepareAnonDump(type: Copy) {

    destinationDir = file('build/resources/main/db-anonymised-data/')
    
    from('os-files/db-anonymised-data/') {
        include '**/*.yml'
    }
    filesMatching("**/**.*") {
        expand project.properties
    }
    into destinationDir
}

task prepareFinanceDataSync(type: Copy) {

    destinationDir = file('build/resources/main')
    from('os-files/finance-data-service-sync/') {
        include '**/*.yml'
    }
    filesMatching("**/**.*") {
        expand project.properties
    }
}

task prepareReset(type: Copy) {

    destinationDir = file('build/resources/main/db-reset/')
    from('os-files/db-reset/') {
        include '**/*.yml'
    }
    filesMatching("**/**.*") {
        expand project.properties
    }
}

task setDatabaseDefaults {
    if (!project.hasProperty('DB_PORT')) {
        project.ext.DB_PORT = 3306
    }
    
    if (!project.hasProperty('FLYWAY_TABLE')) {
        project.ext.FLYWAY_TABLE = 'schema_version'
    }
}
prepareConfigDeployment.mustRunAfter setDatabaseDefaults

task setFinanceDataServiceSyncDefaults {
    if (!project.hasProperty('DATA_SERVICE_PORT')) {
        project.ext.DATA_SERVICE_PORT = 8080
    }
}
prepareConfigDeployment.mustRunAfter setFinanceDataServiceSyncDefaults

task setDbResetDefaults {
    if (!project.hasProperty('LDAP_PORT')) {
        project.ext.LDAP_PORT = 8389
    }

    if (!project.hasProperty('ONLY_SYNC_LDAP')) {
        project.ext.ONLY_SYNC_LDAP = false
    }
    
    if (!project.hasProperty('ONLY_DELETE_IFS_USERS')) {
        project.ext.ONLY_SYNC_LDAP = false
    }
}
prepareConfigDeployment.mustRunAfter setDbResetDefaults

task osApplySecretsProduction(type: Exec) {
    executable = 'setup-files/scripts/openshift/os-apply-aws-secrets.sh'
    args = [openshiftEnv, "ifs-prod", project.version, project.findProperty("use_iam") ?: "true", project.findProperty("sso_sp") ?: ""]
}

task osDeployProduction(type: Exec, dependsOn: prepareDeployAndUpgrade) {
    executable = 'setup-files/scripts/openshift/os-deploy.sh'
    args = [openshiftEnv, "ifs-prod", project.version]
}

task osDeployProductionConfig(type: Exec, dependsOn: prepareConfigDeployment) {
    executable = 'setup-files/scripts/openshift/os-deploy-config.sh'
    args = [openshiftEnv, "ifs-prod", project.version]
}

task osUpgradeProduction(type: Exec, dependsOn: prepareDeployAndUpgrade) {
    executable = 'setup-files/scripts/openshift/os-upgrade.sh'
    args = [openshiftEnv, "ifs-prod", project.version]
}

task dbAnonymisedDumpProduction(type: Exec, dependsOn: [setDatabaseDefaults, prepareAnonDump]) {
    executable = 'setup-files/scripts/openshift/db-anonymised-dump.sh'
    args = [openshiftEnv, "ifs-prod", project.version]
}

task dbBaselineProduction(type: Exec, dependsOn: [setDatabaseDefaults, prepareBaseline]) {
    executable = 'setup-files/scripts/openshift/db-baseline.sh'
    args = [openshiftEnv, "ifs-prod", project.version]
}

task financeDataSyncProduction(type: Exec, dependsOn: [setDatabaseDefaults, setFinanceDataServiceSyncDefaults, prepareFinanceDataSync]) {
    executable = 'setup-files/scripts/openshift/finance-data-service-sync.sh'
    args = [openshiftEnv, "ifs-prod", project.version]
}

// UAT tasks

task osApplySecretsUat(type: Exec) {
    executable = 'setup-files/scripts/openshift/os-apply-aws-secrets.sh'
    args = [openshiftEnv, "ifs-uat", project.version, project.findProperty("use_iam") ?: "true", project.findProperty("sso_sp") ?: ""]
}

task osDeployUat(type: Exec, dependsOn: prepareDeployAndUpgrade) {
    executable = 'setup-files/scripts/openshift/os-deploy.sh'
    args = [openshiftEnv, "ifs-uat", project.version]
}

task osDeployUatConfig(type: Exec, dependsOn: prepareConfigDeployment) {
    executable = 'setup-files/scripts/openshift/os-deploy-config.sh'
    args = [openshiftEnv, "ifs-uat", project.version]
}

task osUpgradeUat(type: Exec, dependsOn: prepareDeployAndUpgrade) {
    executable = 'setup-files/scripts/openshift/os-upgrade.sh'
    args = [openshiftEnv, "ifs-uat", project.version]
}

task dbResetUat(type: Exec, dependsOn: [setDatabaseDefaults, setDbResetDefaults, prepareReset]) {
    executable = 'setup-files/scripts/openshift/db-reset.sh'
    args = [openshiftEnv, "ifs-uat", project.version]
}

task dbBaselineUat(type: Exec, dependsOn: [setDatabaseDefaults, prepareBaseline]) {
    executable = 'setup-files/scripts/openshift/db-baseline.sh'
    args = [openshiftEnv, "ifs-uat", project.version]
}

task financeDataSyncUat(type: Exec, dependsOn: [setDatabaseDefaults, setFinanceDataServiceSyncDefaults, prepareFinanceDataSync]) {
    executable = 'setup-files/scripts/openshift/finance-data-service-sync.sh'
    args = [openshiftEnv, "ifs-uat", project.version]
}

task dbAnonymisedDumpUat(type: Exec, dependsOn: [setDatabaseDefaults, prepareAnonDump]) {
    executable = 'setup-files/scripts/openshift/db-anonymised-dump.sh'
    args = [openshiftEnv, "ifs-uat", project.version]
}

task importAnonDataIntoUat(type: Exec, dependsOn: prepareAnonDump) {
    executable = 'setup-files/scripts/openshift/import-anon-data-into-environment.sh'
    args = [openshiftEnv, "ifs-uat", project.version]
}

// Demo tasks

task osApplySecretsDemo(type: Exec) {
    executable = 'setup-files/scripts/openshift/os-apply-aws-secrets.sh'
    args = [openshiftEnv, "ifs-demo", project.version, project.findProperty("use_iam") ?: "true", project.findProperty("sso_sp") ?: ""]
}

task osDeployDemo(type: Exec, dependsOn: prepareDeployAndUpgrade) {
    executable = 'setup-files/scripts/openshift/os-deploy.sh'
    args = [openshiftEnv, "ifs-demo", project.version]
}

task osDeployDemoConfig(type: Exec, dependsOn: prepareConfigDeployment) {
    executable = 'setup-files/scripts/openshift/os-deploy-config.sh'
    args = [openshiftEnv, "ifs-demo", project.version]
}

task osUpgradeDemo(type: Exec, dependsOn: prepareDeployAndUpgrade) {
    executable = 'setup-files/scripts/openshift/os-upgrade.sh'
    args = [openshiftEnv, "ifs-demo", project.version]
}

task dbBaselineDemo(type: Exec, dependsOn: [setDatabaseDefaults, prepareBaseline]) {
    executable = 'setup-files/scripts/openshift/db-baseline.sh'
    args = [openshiftEnv, "ifs-demo", project.version]
}

task financeDataSyncDemo(type: Exec, dependsOn: [setDatabaseDefaults, setFinanceDataServiceSyncDefaults, prepareFinanceDataSync]) {
    executable = 'setup-files/scripts/openshift/finance-data-service-sync.sh'
    args = [openshiftEnv, "ifs-demo", project.version]
}

// Sysint tasks

task osApplySecretsSysint(type: Exec) {
    executable = 'setup-files/scripts/openshift/os-apply-aws-secrets.sh'
    args = [openshiftEnv, "ifs-sysint", project.version, project.findProperty("use_iam") ?: "true", project.findProperty("sso_sp") ?: ""]
}

task osDeploySysint(type: Exec, dependsOn: prepareDeployAndUpgrade) {
    executable = 'setup-files/scripts/openshift/os-deploy.sh'
    args = [openshiftEnv, "ifs-sysint", project.version]
}

task osDeploySysintConfig(type: Exec, dependsOn: prepareConfigDeployment) {
    executable = 'setup-files/scripts/openshift/os-deploy-config.sh'
    args = [openshiftEnv, "ifs-sysint", project.version]
}

task osUpgradeSysint(type: Exec, dependsOn: prepareDeployAndUpgrade) {
    executable = 'setup-files/scripts/openshift/os-upgrade.sh'
    args = [openshiftEnv, "ifs-sysint", project.version]
}

task dbResetSysint(type: Exec, dependsOn: [setDatabaseDefaults, setDbResetDefaults, prepareReset]) {
    executable = 'setup-files/scripts/openshift/db-reset.sh'
    args = [openshiftEnv, "ifs-sysint", project.version]
}

task dbBaselineSysint(type: Exec, dependsOn: [setDatabaseDefaults, prepareBaseline]) {
    executable = 'setup-files/scripts/openshift/db-baseline.sh'
    args = [openshiftEnv, "ifs-sysint", project.version]
}

task financeDataSyncSysint(type: Exec, dependsOn: [setDatabaseDefaults, setFinanceDataServiceSyncDefaults, prepareFinanceDataSync]) {
    executable = 'setup-files/scripts/openshift/finance-data-service-sync.sh'
    args = [openshiftEnv, "ifs-sysint", project.version]
}


// Perf tasks

task osApplySecretsPerf(type: Exec) {
    executable = 'setup-files/scripts/openshift/os-apply-aws-secrets.sh'
    args = [openshiftEnv, "ifs-perf", project.version, project.findProperty("use_iam") ?: "true", project.findProperty("sso_sp") ?: ""]
}

task osDeployPerf(type: Exec, dependsOn: prepareDeployAndUpgrade) {
    executable = 'setup-files/scripts/openshift/os-deploy.sh'
    args = [openshiftEnv, "ifs-perf", project.version]
}

task osDeployPerfConfig(type: Exec, dependsOn: prepareConfigDeployment) {
    executable = 'setup-files/scripts/openshift/os-deploy-config.sh'
    args = [openshiftEnv, "ifs-perf", project.version]
}

task osUpgradePerf(type: Exec, dependsOn: prepareDeployAndUpgrade) {
    executable = 'setup-files/scripts/openshift/os-upgrade.sh'
    args = [openshiftEnv, "ifs-perf", project.version]
}

task dbResetPerf(type: Exec, dependsOn: [setDatabaseDefaults, setDbResetDefaults, prepareReset]) {
    executable = 'setup-files/scripts/openshift/db-reset.sh'
    args = [openshiftEnv, "ifs-perf", project.version]
}

task dbBaselinePerf(type: Exec, dependsOn: [setDatabaseDefaults, prepareBaseline]) {
    executable = 'setup-files/scripts/openshift/db-baseline.sh'
    args = [openshiftEnv, "ifs-perf", project.version]
}

task financeDataSyncPerf(type: Exec, dependsOn: [setDatabaseDefaults, setFinanceDataServiceSyncDefaults, prepareFinanceDataSync]) {
    executable = 'setup-files/scripts/openshift/finance-data-service-sync.sh'
    args = [openshiftEnv, "ifs-perf", project.version]
}

// Local tasks

task osInitClusterLocal(type: Exec) {
    executable = 'setup-files/scripts/openshift/init-local-cluster.sh'
    args = [openshiftEnv, "local", project.version]
}

task osApplySecretsLocal(type: Exec) {
    executable = 'setup-files/scripts/openshift/os-apply-local-secrets.sh'
    args = [openshiftEnv, "local", project.version]
}

task osDeployLocal(type: Exec, dependsOn: prepareDeployAndUpgrade) {
    executable = 'setup-files/scripts/openshift/os-deploy.sh'
    args = [openshiftEnv, "local", project.version]
}

task osUpgradeLocal(type: Exec, dependsOn: prepareDeployAndUpgrade) {
    executable = 'setup-files/scripts/openshift/os-upgrade.sh'
    args = [openshiftEnv, "local", project.version]
}

task osDeployLocalConfig(type: Exec, dependsOn: prepareConfigDeployment) {
    executable = 'setup-files/scripts/openshift/os-deploy-config.sh'
    args = [openshiftEnv, "local", project.version]
}

task dbResetLocal(type: Exec, dependsOn: [setDatabaseDefaults, setDbResetDefaults, prepareReset]) {
    executable = 'setup-files/scripts/openshift/db-reset.sh'
    args = [openshiftEnv, "local", project.version]
}

task dbBaselineLocal(type: Exec, dependsOn: [setDatabaseDefaults, prepareBaseline]) {
    executable = 'setup-files/scripts/openshift/db-baseline.sh'
    args = [openshiftEnv, "local", project.version]
}

task financeDataSyncLocal(type: Exec, dependsOn: [setDatabaseDefaults, setFinanceDataServiceSyncDefaults, prepareFinanceDataSync]) {
    executable = 'setup-files/scripts/openshift/finance-data-service-sync.sh'
    args = [openshiftEnv, "local", project.version]
}

task dbAnonymisedDumpLocal(type: Exec, dependsOn: [setDatabaseDefaults, prepareAnonDump]) {
    executable = 'setup-files/scripts/openshift/db-anonymised-dump.sh'
    args = [openshiftEnv, "local", project.version]
}

task osDeleteProjectLocal(type: Exec) {
    doFirst {
        executable 'oc'
        args 'delete', 'project', openshiftEnv, "--token=${"oc whoami -t".execute().text.trim()}", "--server=${svcAccountClauseServerLocal}", "--insecure-skip-tls-verify=true"
    }

    ignoreExitValue true

    doLast {
        sleep 10_000L
    }
}

task osCreateProjectLocal(type: Exec, dependsOn: osDeleteProjectLocal) {
    doFirst {
        executable 'oc'
        args 'new-project', "${openshiftEnv}", "--namespace=${openshiftEnv}", "--token=${"oc whoami -t".execute().text.trim()}", "--server=${svcAccountClauseServerLocal}", "--insecure-skip-tls-verify=true"
    }
}

task importAnonDataIntoLocal(type:Exec, dependsOn: prepareAnonDump) {
    executable = 'setup-files/scripts/openshift/import-anon-data-into-environment.sh'
    args = [openshiftEnv, "local",  project.version]
}

// Remote tasks
// TODO IFS-7091 remove when replaced by deleteProjectRemote in bamboo
task deleteProject(type: Exec) {
    def token
    doFirst {
        if (isNamedEnv()) {
            throw new GradleException("Cannot delete a named environment")
        }
        token = System.env.bamboo_openshift_svc_account_token ?: "oc whoami -t".execute().text.trim()
        executable 'oc'
        args 'delete', 'project', openshiftEnv, "--token=${token}", "--server=${svcAccountClauseServer}", "--insecure-skip-tls-verify=true"
    }

    ignoreExitValue true

    doLast {
        while ({
            sleep(35 * 1000)

            def ocCommand = "oc get project ${openshiftEnv} --token=${token} --server=${svcAccountClauseServer} --insecure-skip-tls-verify=true"
            def proc = ocCommand.execute()

            proc.waitFor()

            def projectDeleted = proc.exitValue() == 1
            if ( !projectDeleted ) {
              println "Project is not deleted yet.. "
            }

            !projectDeleted
        }()) continue
    }
}

task osDeleteProjectRemote(type: Exec) {
    def token
    doFirst {
        if (isNamedEnv()) {
            throw new GradleException("Cannot delete a named environment")
        }
        token = System.env.bamboo_openshift_svc_account_token ?: "oc whoami -t".execute().text.trim()
        executable 'oc'
        args 'delete', 'project', openshiftEnv, "--token=${token}", "--server=${svcAccountClauseServer}", "--insecure-skip-tls-verify=true"
    }

    ignoreExitValue true

    doLast {
        while ({
            sleep(35 * 1000)

            def ocCommand = "oc get project ${openshiftEnv} --token=${token} --server=${svcAccountClauseServer} --insecure-skip-tls-verify=true"
            def proc = ocCommand.execute()

            proc.waitFor()

            def projectDeleted = proc.exitValue() == 1
            if ( !projectDeleted ) {
                println "Project is not deleted yet.. "
            }

            !projectDeleted
        }()) continue
    }
}

// TODO IFS-7091 remove when replaced by createProjectRemote in bamboo
task createProject(dependsOn: deleteProject) {
    def token

    def openshiftDevGroup = "CN=ocp_ifs_devs,OU=Groups,OU=org-cs-0,DC=org-cs-0,DC=iuk,DC=local"
    def openshiftAdminGroup = "CN=ocp_ifs_admins,OU=Groups,OU=org-cs-0,DC=org-cs-0,DC=iuk,DC=local"

    doFirst {

        token = System.env.bamboo_openshift_svc_account_token ?: "oc whoami -t".execute().text.trim()
        exec {
            executable 'oc'
            args 'new-project', "${openshiftEnv}", "--namespace=${openshiftEnv}", "--token=${token}", "--server=${svcAccountClauseServer}", "--insecure-skip-tls-verify=true"
        }

        if (openshiftEnv == "ifs-prod" || openshiftEnv == "ifs-uat") {
            exec {
                executable 'oc'
                args 'adm', 'policy', 'add-role-to-group', 'admin', "${openshiftAdminGroup}", '-n', "${openshiftEnv}", "--token=${token}", "--server=${svcAccountClauseServer}", "--insecure-skip-tls-verify=true"
            }
        } else {
            exec {
                executable 'oc'
                args 'adm', 'policy', 'add-role-to-group', 'admin', "${openshiftAdminGroup}", '-n', "${openshiftEnv}", "--token=${token}", "--server=${svcAccountClauseServer}", "--insecure-skip-tls-verify=true"
            }

            exec {
                executable 'oc'
                args 'adm', 'policy', 'add-role-to-group', 'admin',  "${openshiftDevGroup}", '-n', "${openshiftEnv}", "--token=${token}", "--server=${svcAccountClauseServer}", "--insecure-skip-tls-verify=true"
            }
        }
    }
}

task osCreateProjectRemote(dependsOn: osDeleteProjectRemote) {
    def token

    def openshiftDevGroup = "CN=ocp_ifs_devs,OU=Groups,OU=org-cs-0,DC=org-cs-0,DC=iuk,DC=local"
    def openshiftAdminGroup = "CN=ocp_ifs_admins,OU=Groups,OU=org-cs-0,DC=org-cs-0,DC=iuk,DC=local"

    doFirst {
        token = System.env.bamboo_openshift_svc_account_token ?: "oc whoami -t".execute().text.trim()
        exec {
            executable 'oc'
            args 'new-project', "${openshiftEnv}", "--namespace=${openshiftEnv}", "--token=${token}", "--server=${svcAccountClauseServer}", "--insecure-skip-tls-verify=true"
        }

        if (openshiftEnv == "ifs-prod" || openshiftEnv == "ifs-uat") {
            exec {
                executable 'oc'
                args 'adm', 'policy', 'add-role-to-group', 'admin', "${openshiftAdminGroup}", '-n', "${openshiftEnv}", "--token=${token}", "--server=${svcAccountClauseServer}", "--insecure-skip-tls-verify=true"
            }
        } else {
            exec {
                executable 'oc'
                args 'adm', 'policy', 'add-role-to-group', 'admin', "${openshiftAdminGroup}", '-n', "${openshiftEnv}", "--token=${token}", "--server=${svcAccountClauseServer}", "--insecure-skip-tls-verify=true"
            }

            exec {
                executable 'oc'
                args 'adm', 'policy', 'add-role-to-group', 'admin',  "${openshiftDevGroup}", '-n', "${openshiftEnv}", "--token=${token}", "--server=${svcAccountClauseServer}", "--insecure-skip-tls-verify=true"
            }
        }
    }
}

task osApplyAwsSecretsRemote(type: Exec) {
    executable = 'setup-files/scripts/openshift/os-apply-aws-secrets.sh'
    args = [openshiftEnv, "remote", project.version, project.findProperty("use_iam") ?: "true", project.findProperty("sso_sp") ?: ""]
}

task osApplyLocalSecretsRemote(type: Exec) {
    executable = 'setup-files/scripts/openshift/os-apply-local-secrets.sh'
    args = [openshiftEnv, "remote", project.version]
}

task osDeployRemote(type: Exec, dependsOn: prepareDeployAndUpgrade) {
    executable = 'setup-files/scripts/openshift/os-deploy.sh'
    args = [openshiftEnv, "remote", project.version]
}

task osDeployRemoteConfig(type: Exec, dependsOn: prepareConfigDeployment) {
    executable = 'setup-files/scripts/openshift/os-deploy-config.sh'
    args = [openshiftEnv, "remote", project.version]
}

task osUpgradeRemote(type: Exec, dependsOn: prepareDeployAndUpgrade) {
    executable = 'setup-files/scripts/openshift/os-upgrade.sh'
    args = [openshiftEnv, "remote", project.version]
}

task dbAnonymisedDumpRemote(type: Exec, dependsOn: [setDatabaseDefaults, prepareAnonDump]) {
    executable = 'setup-files/scripts/openshift/db-anonymised-dump.sh'
    args = [openshiftEnv, "remote", project.version]
}

task importAnonDataIntoRemote(type: Exec, dependsOn: prepareAnonDump) {
    executable = 'setup-files/scripts/openshift/import-anon-data-into-environment.sh'
    args = [openshiftEnv, "remote", project.version]
}

task dbResetRemote(type: Exec, dependsOn: [setDatabaseDefaults, setDbResetDefaults, prepareReset]) {
    executable = 'setup-files/scripts/openshift/db-reset.sh'
    args = [openshiftEnv, "remote", project.version]
}

task dbBaselineRemote(type: Exec, dependsOn: [setDatabaseDefaults, prepareBaseline]) {
    executable = 'setup-files/scripts/openshift/db-baseline.sh'
    args = [openshiftEnv, "remote", project.version]
}

task financeDataSyncRemote(type: Exec, dependsOn: [setDatabaseDefaults, setFinanceDataServiceSyncDefaults, prepareFinanceDataSync]) {
    executable = 'setup-files/scripts/openshift/finance-data-service-sync.sh'
    args = [openshiftEnv, "remote", project.version]
}

task robotTestsFilter(type: Copy) {
    from 'robot-tests/IFS_acceptance_tests/resources/variables/'
    into 'robot-tests/IFS_acceptance_tests/resources/variables/'
    include 'EMAIL_VARIABLES_TEMPLATE.robot'
    rename 'EMAIL_VARIABLES_TEMPLATE.robot', 'EMAIL_VARIABLES_SENSITIVE.robot'
    filter(ReplaceTokens, tokens: [test_mailbox_one_password: project.properties['ifs.robot.mailbox.one.password'], test_mailbox_two_password: project.properties['ifs.robot.mailbox.two.password']])
}

import org.apache.tools.ant.filters.*

task osTestRemote(type: Exec, dependsOn: robotTestsFilter) {
    executable = 'setup-files/scripts/openshift/os-test-remote.sh'
    args = [openshiftEnv, osTestArgs]
}

task osBlockTilTestsRunning(type: Exec) {
    executable = 'setup-files/scripts/openshift/os-block-til-tests-running.sh'
    args = [openshiftEnv, "remote", project.version]
}

task osStopTests(type: Exec) {
    executable = 'setup-files/scripts/openshift/os-stop-tests.sh'
    args = [openshiftEnv, "remote", project.version]
}

task osTestResults(type: Exec) {
    executable = 'setup-files/scripts/openshift/os-test-results.sh'
    args = [openshiftEnv, "remote", project.version]
}

task osDeployAuthServices(type: Exec, dependsOn: prepareDeployAndUpgrade) {
    executable = 'setup-files/scripts/openshift/os-deploy-auth-services.sh'
    args = [openshiftEnv, "remote", project.version, project.findProperty("nexus_username"), project.findProperty("nexus_password"), project.findProperty("nexus_email"),  project.findProperty("nexus_version")]
}

task osDeployIfsServicesUsingNexusImages(type: Exec, dependsOn: prepareDeployAndUpgrade) {
    executable = 'setup-files/scripts/openshift/os-deploy.sh'
    args = [openshiftEnv, "remote", project.version, "nexus", project.findProperty("nexus_username"), project.findProperty("nexus_password"), project.findProperty("nexus_email"),  project.findProperty("nexus_version")]
}
