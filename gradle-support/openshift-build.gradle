import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.DockerRegistryCredentials
import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.container.extras.*
apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin
apply plugin: com.bmuschko.gradle.docker.DockerJavaApplicationPlugin

if (project.hasProperty('openshiftEnv')) {
    ext.openshiftEnv = openshiftEnv.replaceAll('/', '-')
}

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "com.bmuschko:gradle-docker-plugin:3.2.6"
    }
}

task buildDocker(type: DockerBuildImage) {

    tag = "innovateuk/${project.name.replaceAll(/ifs-/, "")}"
    inputDir = project.projectDir

    outputs.upToDateWhen {

        def image = tag
        if(image.contains(":")) {
            image = image.substring(0, image.indexOf(":"))
        }

        "docker images".execute().text.contains("$image ")
    }
}

task tagDockerNexus(type: DockerTagImage, dependsOn: buildDocker) {
    imageId = buildDocker.getTag()
    repository = project.nexusRegistry + "/release/" + project.name.replaceAll(/ifs-/, "")
    tag = project.version
}

task tagDocker(type: DockerTagImage) {
    dependsOn buildDocker
    imageId = buildDocker.getTag()
    repository = project.dockerRegistry + "/" + openshiftEnv + "/" + project.name.replaceAll(/ifs-/, "")
    tag = project.version
}

task stop(type: DockerStopContainer) {
    targetContainerId { createContainer.getContainerId() }
    onError {
        //Deliberately ignore
    }
}

task removeContainer(type: DockerRemoveContainer, dependsOn: stop) {
    targetContainerId { createContainer.getContainerId() }
    onError {
        //Deliberately ignore
    }
}

task createContainer(type: DockerCreateContainer, dependsOn: [buildDocker, removeContainer]) {
    imageId = "innovateuk/${project.name.replaceAll(/ifs-/, "")}"
    containerName = "${project.name.replaceAll(/ifs-/, "")}"
    containerId = "${project.name.replaceAll(/ifs-/, "")}"
    network="ifs"
}

task deploy(type: DockerStartContainer, dependsOn: createContainer) {
    targetContainerId { createContainer.getContainerId() }
}

task wait(type: DockerWaitHealthyContainer) {
    targetContainerId { createContainer.getContainerId() }
}
wait.mustRunAfter deploy

task stageNexus(type: DockerPushImage, dependsOn: tagDockerNexus) {
    if (openshiftEnv == "ifs-uat") {
        registryCredentials = getNexusCredentials()
        imageName = registryCredentials.url + "/release/" + project.name.replaceAll(/ifs-/, "")
        tag = project.version
    }
}
stageNexus.onlyIf { isAcceptanceBranch() }

task osStageRemote(type: DockerPushImage) {
    dependsOn tagDocker
    registryCredentials = getRemoteOCCredentials()
    imageName = registryCredentials.url + "/" + openshiftEnv + "/" + project.name.replaceAll(/ifs-/, "")
    tag = project.version
}

task tagDockerLocal(type: DockerTagImage) {
    dependsOn buildDocker
    imageId = buildDocker.getTag()
    repository = "dummy"
    doFirst {
        if (repository == "dummy") {
            repository = getLocalOCCredentials().url + "/" + openshiftEnv + "/" + project.name.replaceAll(/ifs-/, "")
        }
    }
    tag = project.version
}

task osStageLocal(type: DockerPushImage) {
    dependsOn tagDockerLocal
    imageName = "dummy"
    doFirst {
        if (imageName == "dummy") {
            registryCredentials = getLocalOCCredentials()
            imageName = registryCredentials.url + "/" + openshiftEnv + "/" + project.name.replaceAll(/ifs-/, "")
        }
    }
    tag = project.version
}

def getLocalOCCredentials() {
    def dockerRegistryCredentials = new DockerRegistryCredentials()
    // Get the docker repository for the local OS cluster
    def localIpCommand = "oc get svc docker-registry -n default -o jsonpath='{.spec.clusterIP}'"
    def localPortCommand = "oc get svc docker-registry -n default -o jsonpath='{.spec.ports..port}'"
    project.ext.localIp = localIpCommand.execute().text.replace("'", "").trim()
    project.ext.localPort = localPortCommand.execute().text.replace("'", "").trim()
    dockerRegistryCredentials.url = project.ext.localIp + ":" + project.ext.localPort
    dockerRegistryCredentials.username = "unused"
    dockerRegistryCredentials.password = dockerRegistryCredentials.password ?: System.env.bamboo_openshift_svc_account_token ?: "oc whoami -t".execute().text.trim()
    dockerRegistryCredentials.email = "unused"
    return dockerRegistryCredentials
}

def getRemoteOCCredentials() {
    def dockerRegistryCredentials = new DockerRegistryCredentials()
    try {
        // Get the docker repository for the remote OS cluster
        dockerRegistryCredentials.url = "docker-registry-default.apps."+project.openshiftDomain
        dockerRegistryCredentials.username = "unused"
        dockerRegistryCredentials.password = dockerRegistryCredentials.password ?: System.env.bamboo_openshift_svc_account_token ?: "oc whoami -t".execute().text.trim()
        dockerRegistryCredentials.email = "unused"
    }
    catch (ignored) {
        println("Exception thrown creating the OpenShift docker registry credentials. " +
                "This is most likely because the OpenShift commandline client is not installed. " +
                "This is only an issue if wanting to deploy to an OpenShift cluster, " +
                "in which case it will need to be installed")
        println(ignored)
    }
    return dockerRegistryCredentials
}

def getNexusCredentials() {
    def dockerRegistryCredentials = new DockerRegistryCredentials()
    dockerRegistryCredentials.url = project.nexusRegistry
    dockerRegistryCredentials.username = project.findProperty("nexus_username")
    dockerRegistryCredentials.password =project.findProperty("nexus_password")
    return dockerRegistryCredentials
}

ext {
    getLocalOCCredentials = this.&getLocalOCCredentials
    getRemoteOCCredentials = this.&getRemoteOCCredentials
}

task pullImage(type: DockerPullImage) {
    registryCredentials = getNexusCredentials()
    repository = project.nexusRegistry + "/release/" + project.name.replaceAll(/ifs-/, "")
    tag = project.version.replaceAll("-SNAPSHOT", "")
}

task pullImageAndCreateContainer(type: DockerCreateContainer) {
    dependsOn 'pullImage'
    dependsOn 'removeNexusContainer'
    containerName = "${project.name.replaceAll(/ifs-/, "")}"
    containerId = "${project.name.replaceAll(/ifs-/, "")}"
    imageId = pullImage.getImageId()
    network="ifs"
}

task deployNexusLocal(type: DockerStartContainer, dependsOn: pullImageAndCreateContainer) {
    targetContainerId { pullImageAndCreateContainer.getContainerId() }
}

task waitNexusDeploy(type: DockerWaitHealthyContainer) {
    targetContainerId { pullImageAndCreateContainer.getContainerId() }
}

task stopNexusContainer(type: DockerStopContainer) {
    targetContainerId { pullImageAndCreateContainer.getContainerId() }
    onError { exception ->
        if (exception.class.simpleName.matches('^(NotModified|NotFound)Exception$')) {
            println 'Container not running'
        } else {
            throw exception
        }
    }
}

task removeNexusContainer(type: DockerRemoveContainer, dependsOn: stopNexusContainer) {
    targetContainerId { pullImageAndCreateContainer.getContainerId() }
    onError { exception ->
        if (exception.class.simpleName.matches('^(NotModified|NotFound)Exception$')) {
            println 'Container not running'
        } else {
            throw exception
        }
    }
}

waitNexusDeploy.mustRunAfter deployNexusLocal