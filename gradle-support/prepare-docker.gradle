import org.apache.tools.ant.filters.ReplaceTokens

apply from: rootProject.file("gradle-support/new-relic.gradle")
/**
 * This task creates a `docker` directory in the $BUILD/docker` directory of the project,
 * where it will write all the necessary files to build a docker container.
 * In other words, after this task is executed, one could manually run `docker build .`
 * in the output directory.
 */
ext.dockerDir = "docker/"

task prepareDockerBaseInput {
    dependsOn build

    def executableJarFile = "${jar.baseName}-${project.properties['version']}-executable.jar"
    def inputDir = "$project.buildDir/docker"
    def jarFile = "${jar.baseName}-${project.properties['version']}.jar"
    def libs = "$project.buildDir/libs"
    String gid = System.env.bamboo_gluster_GID ?: "993"
    String uid = System.env.bamboo_gluster_UID ?: "996"
    String userPassword = System.env.bamboo_gluster_user_password ?: "default"

    inputs.file("$project.buildDir/libs/$executableJarFile")

    outputs.files(
            project.file("$inputDir/Dockerfile"),
            project.file("$inputDir/$jarFile")
    )

    doFirst {
        copy {
            from file(dockerDir)
            into project.file(inputDir)
            rename 'Dockerfile-template', 'Dockerfile'
            filter(ReplaceTokens, tokens: ['version': project.properties['version']])
            filter(ReplaceTokens, tokens: ['app_name': jar.baseName])
            filter(ReplaceTokens, tokens: ['server_context': project.properties['serverContext'] ?: ''])
            filter(ReplaceTokens, tokens: ['glusterGID': gid])
            filter(ReplaceTokens, tokens: ['glusterUID': uid])
            filter(ReplaceTokens, tokens: ['glusterUserPassword': userPassword])
        }
        copy {
            from file("$libs/$executableJarFile")
            into project.file(inputDir)
            rename(executableJarFile, jarFile)
        }
    }
}

task prepareDockerInput {
    dependsOn build
    dependsOn prepareDockerBaseInput
    dependsOn getNewRelicAgent

    def currentFilePath = "${rootProject.projectDir}/setup-files/scripts/docker"
    def inputDir = "$project.buildDir/docker"
    outputs.files(
            project.file("$inputDir/coscale-monitoring.sh"),
            project.file("$inputDir/newrelic.jar"),
            project.file("$inputDir/newrelic.yml")
    )

    doFirst {
        copy {
            from file("$currentFilePath/coscale-monitoring.sh")
            from file("$currentFilePath/newrelic.jar")
            from file("$currentFilePath/newrelic.yml")
            from file("$currentFilePath/set-umask0002.sh")
            into file(inputDir)
        }
    }

}
