def targetBuild = hasProperty('profile') ? profile : 'docker';

apply from: rootProject.file("gradle-support/spring-boot.gradle")
apply from: rootProject.file("gradle-support/openshift-build.gradle")

group 'innovateuk'
version project.version

apply plugin: 'idea'

description = """"""
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    maven { url "http://repo.maven.apache.org/maven2" }
}

dependencies {

    compile("org.springframework.ldap:spring-ldap-core")
    compile("org.springframework.security:spring-security-ldap")
    compile("org.springframework.data:spring-data-ldap")
    compile("org.springframework.boot:spring-boot-starter-security")

    testCompile("org.springframework.ldap:spring-ldap-test")
}

apply from: rootProject.file("gradle-support/prepare-docker.gradle")


task prepareDockerInputRegService {
    dependsOn prepareDockerInput
    dependsOn ':ifs-auth-service:prepareLDAPEncryptionSecrets'

    def inputDir = project.file("$project.buildDir/docker")

    doFirst {
        copy {
            from file("${rootProject.projectDir}/ifs-auth-service/ifs-ldap-service/src/main/docker/certs/ldap-encryption.crt")
            into inputDir
        }
    }
}

buildDocker.dependsOn ":docker:openjdk:buildDocker"
buildDocker.dependsOn prepareDockerInputRegService
buildDocker.tag = "innovateuk/" + project.name.replaceAll(/ifs-/, "") + ":latest"
buildDocker.inputDir = project.file("$project.buildDir/docker")

tagDocker.imageId = "innovateuk/" + project.name.replaceAll(/ifs-/, "") + ":latest"
tagDockerLocal.imageId = "innovateuk/" + project.name.replaceAll(/ifs-/, "") + ":latest"


project.version = registrationServiceVersion
tagDocker.tag = registrationServiceVersion
osStageRemote.tag = registrationServiceVersion
tagDockerLocal.tag = registrationServiceVersion
osStageLocal.tag = registrationServiceVersion

createContainer.hostName = "registration-svc"
createContainer.containerName = "registration-svc"
createContainer.containerId = "registration-svc"
createContainer.env = ["SHIBBOLETH_API_KEYS=1234567890"]


def enabled = project.hasProperty('initialise') ? project.property('initialise').toBoolean() : false
[stop, removeContainer, createContainer, deploy, wait].each { task ->
    task.enabled = enabled
}

deploy.dependsOn ":ifs-auth-service:ifs-ldap-service:deploy"